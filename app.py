# -*- coding: utf-8 -*-
"""Final_Project_Medical_Assistant_Group#32.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGh9sn5ZUXAMFEuFwytYCzIJ6QKwpHbB
"""

pip install transformers

import pandas as pd
from sklearn.model_selection import train_test_split
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification, AdamW
import torch
from torch.utils.data import DataLoader, TensorDataset
from sklearn.metrics import classification_report

# Load the dataset
df = pd.read_csv('Symptom2Disease.csv', index_col=0)
df.head()

df.shape

print(len(df['label'].unique()), '\n', df['label'].unique())

# Convert labels to numerical format
label_mapping = {label: idx for idx, label in enumerate(df['label'].unique())}
df['label'] = df['label'].map(label_mapping)

# Split the dataset into training and testing sets
train_texts, test_texts, train_labels, test_labels = train_test_split(
    df['text'], df['label'], test_size=0.2, random_state=42
    )

# Load DistilBERT tokenizer and model
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')
model = DistilBertForSequenceClassification.from_pretrained(
    'distilbert-base-uncased', num_labels=len(df['label'].unique())
    )

# Tokenize the texts and create DataLoader for training and testing
train_encodings = tokenizer(list(train_texts), truncation=True, padding=True)
test_encodings = tokenizer(list(test_texts), truncation=True, padding=True)

train_dataset = TensorDataset(torch.tensor(train_encodings['input_ids']),
                              torch.tensor(train_encodings['attention_mask']),
                              torch.tensor(train_labels.values))

test_dataset = TensorDataset(torch.tensor(test_encodings['input_ids']),
                             torch.tensor(test_encodings['attention_mask']),
                             torch.tensor(test_labels.values))

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Set up training parameters
optimizer = AdamW(model.parameters(), lr=1e-5)
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

# Training loop
epochs = 5

for epoch in range(epochs):
    model.train()
    for batch in train_loader:
        input_ids, attention_mask, labels = [item.to(device) for item in batch]

        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()

# Evaluation
model.eval()
predictions = []
true_labels = []

with torch.no_grad():
    for batch in test_loader:
        input_ids, attention_mask, labels = [item.to(device) for item in batch]
        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predicted_labels = torch.argmax(logits, dim=1).cpu().numpy()

        predictions.extend(predicted_labels)
        true_labels.extend(labels.cpu().numpy())

# Print classification report
target_names = df['label'].unique().astype(str)
print(classification_report(true_labels, predictions, target_names=target_names))

# Function to predict disease based on symptoms
def predict_disease(symptoms):
    inputs = tokenizer(symptoms, truncation=True, padding=True, return_tensors='pt')
    with torch.no_grad():
        logits = model(**inputs).logits
    predicted_label_idx = torch.argmax(logits, dim=1).item()
    predicted_label = [label for label, idx in label_mapping.items() if idx == predicted_label_idx][0]
    return predicted_label

pip install gradio

# Create a Gradio interface
import gradio as gr

demo = gr.Interface(
    fn=predict_disease,
    inputs=gr.inputs.Textbox(placeholder="Enter your symptoms separated by commas..."),
    outputs=gr.outputs.Textbox(label="Predicted Disease")
)

demo.launch()